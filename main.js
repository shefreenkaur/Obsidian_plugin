/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => KnowledgeSynthesisPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/utils/text-processing.ts
var TextProcessingUtils = class {
  constructor() {
    //Common English stop words to filter out
    this.stopWords = /* @__PURE__ */ new Set([
      "a",
      "an",
      "the",
      "and",
      "or",
      "but",
      "is",
      "are",
      "was",
      "were",
      "be",
      "been",
      "being",
      "have",
      "has",
      "had",
      "do",
      "does",
      "did",
      "of",
      "as",
      "like",
      "if",
      "that",
      "you",
      "with",
      "your",
      "through",
      "to",
      "from",
      "in",
      "out",
      "on",
      "off",
      "over",
      "under",
      "again",
      "further",
      "then",
      "once",
      "here",
      "there",
      "when",
      "where",
      "why",
      "how",
      "all",
      "any",
      "both",
      "each",
      "few",
      "more",
      "most",
      "other",
      "some",
      "such",
      "no",
      "nor",
      "not",
      "only",
      "own",
      "same",
      "so",
      "than",
      "too",
      "very",
      "can",
      "will",
      "just",
      "should",
      "now"
    ]);
  }
  /**
   * Tokenize text into words
   * @param text Input text to tokenize
   * @returns Array of tokens
   */
  tokenize(text) {
    const normalized = text.toLowerCase().replace(/[^\w\s]/g, " ").replace(/\s+/g, " ").trim();
    return normalized.split(" ");
  }
  /**
   * Calculate term frequency for tokens
   * @param tokens Array of tokens
   * @returns Map of terms to their frequency
   */
  calculateTermFrequency(tokens) {
    const termFrequency = /* @__PURE__ */ new Map();
    for (const token of tokens) {
      const count = termFrequency.get(token) || 0;
      termFrequency.set(token, count + 1);
    }
    return termFrequency;
  }
  /**
   * Remove common stop words from tokens
   * @param tokens Array of tokens
   * @returns Filtered array with stop words removed
   */
  removeStopWords(tokens) {
    return tokens.filter((token) => !this.stopWords.has(token) && token.length > 1);
  }
  /**
   * Basic stemming algorithm for English
   * Implements a simple version of Porter stemming
   * @param tokens Array of tokens
   * @returns Array of stemmed tokens
   */
  stemWords(tokens) {
    return tokens.map((token) => {
      if (token.endsWith("ing")) {
        return token.slice(0, -3);
      } else if (token.endsWith("ly")) {
        return token.slice(0, -2);
      } else if (token.endsWith("s") && !token.endsWith("ss")) {
        return token.slice(0, -1);
      } else if (token.endsWith("ed") && token.length > 4) {
        return token.slice(0, -2);
      } else {
        return token;
      }
    });
  }
  /**
   * Extract potential named entities from text
   * Very simplified implementation for proof of concept
   * @param text Input text
   * @returns Array of potential named entities
   */
  extractNamedEntities(text) {
    const sentences = text.split(/[.!?]+/);
    const entities = [];
    for (const sentence of sentences) {
      const words = sentence.trim().split(" ");
      for (let i = 0; i < words.length; i++) {
        const word = words[i];
        if (i > 0 && word.length > 1 && /^[A-Z][a-z]+$/.test(word)) {
          entities.push(word);
        }
        if (i < words.length - 1 && word.length > 1 && /^[A-Z][a-z]+$/.test(word) && /^[A-Z][a-z]+$/.test(words[i + 1])) {
          entities.push(`${word} ${words[i + 1]}`);
        }
      }
    }
    return [...new Set(entities)];
  }
};

// src/core/concept-extractor.ts
var ConceptExtractorImpl = class {
  //Store user feedback on concepts
  constructor() {
    this.sensitivity = 5;
    this.userFeedback = /* @__PURE__ */ new Map();
    this.textProcessor = new TextProcessingUtils();
  }
  /**
   * Extract concepts from text content
   * @param content Text content to analyze
   * @returns Array of extracted concepts
   */
  extractConcepts(content) {
    if (!content || content.trim() === "") {
      return [];
    }
    const concepts = [
      ...this.extractFromTfIdf(content),
      ...this.extractFromHeadings(content),
      ...this.extractFromEmphasis(content),
      ...this.extractFromNamedEntities(content)
    ];
    const filteredConcepts = concepts.filter((concept) => {
      const feedback = this.userFeedback.get(concept);
      if (feedback === false) {
        return false;
      }
      return true;
    });
    return [...new Set(filteredConcepts)];
  }
  /**
   * Set sensitivity for extraction (1-10)
   * @param sensitivity Sensitivity level (1-10)
   */
  setSensitivity(sensitivity) {
    this.sensitivity = Math.max(1, Math.min(10, sensitivity));
  }
  /**
   * Learn from user feedback on concept relevance
   * @param concept The concept receiving feedback
   * @param isRelevant Whether the user marked it as relevant
   */
  learnFromUserFeedback(concept, isRelevant) {
    this.userFeedback.set(concept, isRelevant);
  }
  /**
   * Extract concepts using TF-IDF like approach
   * @param content Text content to analyze
   * @returns Array of concepts
   */
  extractFromTfIdf(content) {
    const tokens = this.textProcessor.tokenize(content);
    const filteredTokens = this.textProcessor.removeStopWords(tokens);
    const termFrequency = this.textProcessor.calculateTermFrequency(filteredTokens);
    const threshold = Math.max(2, Math.floor(20 / (11 - this.sensitivity)));
    const sortedTerms = Array.from(termFrequency.entries()).filter(([_, freq]) => freq >= threshold).sort((a, b) => b[1] - a[1]).slice(0, this.sensitivity * 3).map(([term, _]) => term);
    return sortedTerms;
  }
  /**
   * Extract concepts from markdown headings
   * @param content Markdown content
   * @returns Array of concepts from headings
   */
  extractFromHeadings(content) {
    const headingRegex = /^#+\s+(.+)$/gm;
    const headings = [];
    let match;
    while ((match = headingRegex.exec(content)) !== null) {
      headings.push(match[1].trim());
    }
    return headings;
  }
  /**
   * Extract concepts from emphasized text (bold/italic)
   * @param content Markdown content
   * @returns Array of concepts from emphasized text
   */
  extractFromEmphasis(content) {
    const emphasisRegex = /(\*\*|__)(.*?)\1|(\*|_)(.*?)\3/g;
    const emphasized = [];
    let match;
    while ((match = emphasisRegex.exec(content)) !== null) {
      const text = match[2] || match[4];
      if (text && text.trim().length > 0) {
        emphasized.push(text.trim());
      }
    }
    return emphasized;
  }
  /**
   * Extract named entities as concepts
   * @param content Text content
   * @returns Array of named entities
   */
  extractFromNamedEntities(content) {
    return this.textProcessor.extractNamedEntities(content);
  }
};

// src/core/concept-graph.ts
var import_obsidian = require("obsidian");
var ConceptGraphImpl = class {
  constructor(vault) {
    this.notes = /* @__PURE__ */ new Map();
    this.concepts = /* @__PURE__ */ new Map();
    this.vault = vault;
  }
  /**
   * Add a note to the graph with its concepts
   * @param path Path to the note
   * @param concepts Array of concepts in the note
   */
  addNote(path, concepts) {
    this.notes.set(path, {
      path,
      concepts,
      lastUpdated: Date.now()
    });
    for (const concept of concepts) {
      const conceptNode = this.concepts.get(concept) || {
        name: concept,
        notePaths: [],
        weight: 1
      };
      if (!conceptNode.notePaths.includes(path)) {
        conceptNode.notePaths.push(path);
      }
      conceptNode.weight = conceptNode.notePaths.length;
      this.concepts.set(concept, conceptNode);
    }
  }
  /**
   * Remove a note from the graph
   * @param path Path to the note to remove
   */
  removeNote(path) {
    const note = this.notes.get(path);
    if (!note) {
      return;
    }
    for (const concept of note.concepts) {
      const conceptNode = this.concepts.get(concept);
      if (conceptNode) {
        conceptNode.notePaths = conceptNode.notePaths.filter((p) => p !== path);
        conceptNode.weight = conceptNode.notePaths.length;
        if (conceptNode.notePaths.length === 0) {
          this.concepts.delete(concept);
        } else {
          this.concepts.set(concept, conceptNode);
        }
      }
    }
    this.notes.delete(path);
  }
  /**
   * Find notes related to a given note
   * @param notePath Path to the note
   * @param maxResults Maximum number of results to return
   * @returns Array of related notes sorted by relevance
   */
  findRelatedNotes(notePath, maxResults = 10) {
    const note = this.notes.get(notePath);
    if (!note) {
      return [];
    }
    const scores = /* @__PURE__ */ new Map();
    for (const concept of note.concepts) {
      const conceptNode = this.concepts.get(concept);
      if (!conceptNode)
        continue;
      for (const relatedPath of conceptNode.notePaths) {
        if (relatedPath === notePath)
          continue;
        const scoreData = scores.get(relatedPath) || {
          relevance: 0,
          sharedConcepts: []
        };
        scoreData.relevance += conceptNode.weight;
        if (!scoreData.sharedConcepts.includes(concept)) {
          scoreData.sharedConcepts.push(concept);
        }
        scores.set(relatedPath, scoreData);
      }
    }
    const relatedNotes = [];
    const maxScore = Math.max(...Array.from(scores.values()).map((data) => data.relevance), 1);
    for (const [path, data] of scores.entries()) {
      const file = this.vault.getAbstractFileByPath(path);
      if (!file || !(file instanceof import_obsidian.TFile))
        continue;
      relatedNotes.push({
        file,
        relevance: data.relevance / maxScore,
        // Normalize to 0-1
        sharedConcepts: data.sharedConcepts
      });
    }
    return relatedNotes.sort((a, b) => b.relevance - a.relevance).slice(0, maxResults);
  }
  /**
   * Get all concepts for a note
   * @param notePath Path to the note
   * @returns Array of concepts
   */
  getNoteConcepts(notePath) {
    const note = this.notes.get(notePath);
    return note ? note.concepts : [];
  }
  /**
   * Get graph data for visualization
   * @returns Object with nodes and edges arrays for visualization
   */
  getConceptNetwork() {
    const nodes = [];
    const edges = [];
    for (const [path, note] of this.notes.entries()) {
      nodes.push({
        id: path,
        label: path.split("/").pop() || path,
        // Use filename as label
        type: "note"
      });
    }
    for (const [name, concept] of this.concepts.entries()) {
      if (concept.notePaths.length > 1) {
        nodes.push({
          id: `concept-${name}`,
          label: name,
          type: "concept",
          weight: concept.weight
        });
        for (const path of concept.notePaths) {
          edges.push({
            source: `concept-${name}`,
            target: path,
            value: 1
          });
        }
      }
    }
    return { nodes, edges };
  }
};

// src/core/data-manager.ts
var DataManagerImpl = class {
  constructor(plugin) {
    // Current data version for migration support
    this.CURRENT_VERSION = 1;
    this.plugin = plugin;
    this.data = {
      version: this.CURRENT_VERSION,
      notes: {},
      concepts: {},
      userFeedback: {}
    };
  }
  /**
   * Save concept data to disk
   */
  async saveConceptData() {
    await this.plugin.saveData(this.data);
  }
  /**
   * Load concept data from disk
   */
  async loadConceptData() {
    try {
      const savedData = await this.plugin.loadData();
      if (!savedData) {
        return;
      }
      if (savedData.version !== this.CURRENT_VERSION) {
        this.data = this.migrateData(savedData);
      } else {
        this.data = savedData;
      }
    } catch (error) {
      console.error("Failed to load concept data:", error);
    }
  }
  /**
   * Clear all stored data
   */
  async clearData() {
    this.data = {
      version: this.CURRENT_VERSION,
      notes: {},
      concepts: {},
      userFeedback: {}
    };
    await this.saveConceptData();
  }
  /**
   * Get the loaded data
   */
  getData() {
    return this.data;
  }
  /**
   * Set the data (used when updating from the concept graph)
   */
  setData(notes, concepts, userFeedback) {
    this.data = {
      version: this.CURRENT_VERSION,
      notes,
      concepts,
      userFeedback
    };
  }
  /**
   * Migrate data from an older version to the current version
   */
  migrateData(oldData) {
    return {
      version: this.CURRENT_VERSION,
      notes: oldData.notes || {},
      concepts: oldData.concepts || {},
      userFeedback: oldData.userFeedback || {}
    };
  }
};

// src/services/note-processor.ts
var import_obsidian2 = require("obsidian");
var NoteProcessor = class {
  // path -> lastModified
  constructor(vault, conceptExtractor, conceptGraph, saveCallback) {
    this.vault = vault;
    this.conceptExtractor = conceptExtractor;
    this.conceptGraph = conceptGraph;
    this.saveCallback = saveCallback;
    // Keep track of processed files to avoid redundant processing
    this.processedFiles = /* @__PURE__ */ new Map();
  }
  /**
   * Process a single note file
   * @param file Note file to process
   */
  async processNote(file) {
    if (!this.shouldProcessNote(file)) {
      return;
    }
    try {
      const content = await this.vault.read(file);
      const concepts = this.conceptExtractor.extractConcepts(content);
      this.conceptGraph.addNote(file.path, concepts);
      this.processedFiles.set(file.path, file.stat.mtime);
      await this.saveCallback();
    } catch (error) {
      console.error(`Error processing file ${file.path}:`, error);
    }
  }
  /**
   * Check if a file needs processing
   * @param file File to check
   * @returns true if file needs processing, false otherwise
   */
  shouldProcessNote(file) {
    if (file.extension !== "md") {
      return false;
    }
    const lastModified = file.stat.mtime;
    const lastProcessed = this.processedFiles.get(file.path);
    return !lastProcessed || lastProcessed < lastModified;
  }
  /**
   * Process all notes in the vault
   */
  async processAllNotes() {
    const files = this.vault.getMarkdownFiles();
    let processedCount = 0;
    const notice = new import_obsidian2.Notice(`Processing ${files.length} notes...`, 0);
    for (const file of files) {
      await this.processNote(file);
      processedCount++;
      if (processedCount % 10 === 0) {
        notice.setMessage(`Processed ${processedCount}/${files.length} notes...`);
      }
    }
    await this.saveCallback();
    notice.hide();
    new import_obsidian2.Notice(`Completed processing ${processedCount} notes.`);
  }
};

// src/services/summary-generator.ts
var import_obsidian3 = require("obsidian");
var SummaryGenerator = class {
  constructor(app, conceptGraph, getRelatedNotes) {
    this.app = app;
    this.conceptGraph = conceptGraph;
    this.getRelatedNotes = getRelatedNotes;
  }
  /**
   * Generate a summary from related notes
   * @param file File to generate summary for
   * @returns The content of the generated summary
   */
  async generateSummary(file) {
    var _a;
    const relatedNotes = await this.getRelatedNotes(file);
    if (relatedNotes.length === 0) {
      new import_obsidian3.Notice("No related notes found to generate summary");
      return "";
    }
    const summaryTitle = `Summary of ${file.basename}`;
    let summaryContent = `# ${summaryTitle}

`;
    summaryContent += `> [!info] Summary generated from ${file.basename} and ${relatedNotes.length} related notes
`;
    summaryContent += `> Generated on ${new Date().toLocaleString()}

`;
    const originalContent = await this.app.vault.read(file);
    summaryContent += `## Original Note: ${file.basename}

`;
    const firstParagraph = originalContent.split("\n\n")[0];
    summaryContent += `${firstParagraph}

`;
    const concepts = this.conceptGraph.getNoteConcepts(file.path);
    if (concepts.length > 0) {
      summaryContent += `## Key Concepts

`;
      summaryContent += concepts.map((c) => `- ${c}`).join("\n");
      summaryContent += `

`;
    }
    summaryContent += `## Related Notes

`;
    for (const related of relatedNotes) {
      summaryContent += `### ${related.file.basename}

`;
      if (related.sharedConcepts.length > 0) {
        summaryContent += `Shared concepts: ${related.sharedConcepts.join(", ")}

`;
      }
      try {
        const relatedContent = await this.app.vault.read(related.file);
        const firstParagraph2 = relatedContent.split("\n\n")[0];
        summaryContent += `${firstParagraph2}

`;
      } catch (error) {
        summaryContent += `Error reading note content.

`;
      }
      summaryContent += `[[${related.file.path}|View full note]]

`;
    }
    try {
      const summaryPath = `${((_a = file.parent) == null ? void 0 : _a.path) || ""}/${summaryTitle}.md`;
      let summaryFile = this.app.vault.getAbstractFileByPath(summaryPath);
      if (summaryFile) {
        await this.app.vault.modify(summaryFile, summaryContent);
      } else {
        summaryFile = await this.app.vault.create(summaryPath, summaryContent);
      }
      this.app.workspace.getLeaf().openFile(summaryFile);
      return summaryContent;
    } catch (error) {
      console.error("Error creating summary:", error);
      new import_obsidian3.Notice("Error creating summary note");
      return "";
    }
  }
};

// src/ui/related-notes-view.ts
var import_obsidian4 = require("obsidian");
var RELATED_NOTES_VIEW_TYPE = "knowledge-synthesis-related-notes";
var RelatedNotesView = class extends import_obsidian4.ItemView {
  constructor(leaf, pluginApi) {
    super(leaf);
    // Changed from contentEl to avoid conflicts
    this.currentFile = null;
    this.pluginApi = pluginApi;
  }
  getViewType() {
    return RELATED_NOTES_VIEW_TYPE;
  }
  getDisplayText() {
    return "Related Notes";
  }
  async onOpen() {
    const { containerEl } = this;
    containerEl.empty();
    this.relatedContentEl = containerEl.createDiv({ cls: "knowledge-synthesis-related-notes" });
    this.relatedContentEl.createEl("h3", { text: "Related Notes" });
    this.relatedContentEl.createEl("p", {
      text: "Open a note to see related content.",
      cls: "knowledge-synthesis-placeholder"
    });
  }
  /**
   * Update the view with related notes for a file
   * @param file Current active file
   * @param relatedNotes Array of related notes
   */
  updateRelatedNotes(file, relatedNotes) {
    this.currentFile = file;
    this.relatedContentEl.empty();
    this.relatedContentEl.createEl("h3", { text: "Related to: " + file.basename });
    const concepts = this.pluginApi.extractConcepts(file.path);
    if (concepts.length > 0) {
      const conceptsEl = this.relatedContentEl.createDiv({ cls: "knowledge-synthesis-concepts" });
      conceptsEl.createEl("h4", { text: "Key Concepts" });
      const conceptsList = conceptsEl.createDiv({ cls: "knowledge-synthesis-concepts-list" });
      for (const concept of concepts) {
        const tagEl = conceptsList.createSpan({
          cls: "knowledge-synthesis-concept-tag",
          text: concept
        });
      }
    }
    if (relatedNotes.length > 0) {
      const relatedEl = this.relatedContentEl.createDiv({ cls: "knowledge-synthesis-related" });
      relatedEl.createEl("h4", { text: "Related Notes" });
      const relatedList = relatedEl.createDiv({ cls: "knowledge-synthesis-related-list" });
      for (const related of relatedNotes) {
        const noteEl = relatedList.createDiv({ cls: "knowledge-synthesis-related-note" });
        const linkEl = noteEl.createEl("a", {
          cls: "knowledge-synthesis-note-link",
          text: related.file.basename
        });
        linkEl.addEventListener("click", async (e) => {
          e.preventDefault();
          const leaf = this.app.workspace.getLeaf();
          if (leaf) {
            await leaf.openFile(related.file);
          }
        });
        const relevanceEl = noteEl.createDiv({
          cls: "knowledge-synthesis-relevance-bar"
        });
        const indicatorEl = relevanceEl.createDiv({
          cls: "knowledge-synthesis-relevance-indicator"
        });
        indicatorEl.style.width = `${Math.round(related.relevance * 100)}%`;
        if (related.sharedConcepts.length > 0) {
          const sharedEl = noteEl.createDiv({
            cls: "knowledge-synthesis-shared-concepts"
          });
          sharedEl.createSpan({
            cls: "knowledge-synthesis-shared-label",
            text: "Shared concepts: "
          });
          for (const concept of related.sharedConcepts) {
            sharedEl.createSpan({
              cls: "knowledge-synthesis-concept-tag knowledge-synthesis-shared",
              text: concept
            });
          }
        }
      }
    } else {
      this.relatedContentEl.createEl("p", {
        text: "No related notes found. Try adding more content or concepts.",
        cls: "knowledge-synthesis-no-results"
      });
    }
    const actionsEl = this.relatedContentEl.createDiv({ cls: "knowledge-synthesis-actions" });
    const summaryBtn = actionsEl.createEl("button", {
      cls: "knowledge-synthesis-summary-btn",
      text: "Generate Summary"
    });
    summaryBtn.addEventListener("click", async () => {
      if (this.currentFile) {
        await this.pluginApi.generateSummary(this.currentFile);
      }
    });
  }
  /**
   * Clear the view
   */
  clear() {
    this.relatedContentEl.empty();
    this.currentFile = null;
    this.relatedContentEl.createEl("h3", { text: "Related Notes" });
    this.relatedContentEl.createEl("p", {
      text: "Open a note to see related content.",
      cls: "knowledge-synthesis-placeholder"
    });
  }
};

// src/ui/settings-tab.ts
var import_obsidian5 = require("obsidian");
var KnowledgeSynthesisSettingTab = class extends import_obsidian5.PluginSettingTab {
  // Use the specific plugin class type
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Knowledge Synthesis Settings" });
    new import_obsidian5.Setting(containerEl).setName("Concept Extraction Sensitivity").setDesc("Higher values extract more concepts (1-10)").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.extractionSensitivity).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.extractionSensitivity = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Reprocess All Notes").setDesc("Update the concept graph with all notes in the vault").addButton((button) => button.setButtonText("Reprocess").onClick(async () => {
      await this.plugin.processAllNotes();
    }));
    new import_obsidian5.Setting(containerEl).setName("Clear All Data").setDesc("Reset all concept and relationship data").addButton((button) => button.setButtonText("Clear Data").setWarning().onClick(async () => {
      const confirmed = confirm("Are you sure you want to clear all Knowledge Synthesis data? This cannot be undone.");
      if (confirmed) {
        await this.plugin.dataManager.clearData();
        new import_obsidian5.Notice("Knowledge Synthesis data cleared");
      }
    }));
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  extractionSensitivity: 5,
  maxRelatedNotes: 10,
  realTimeSuggestions: true,
  includeTags: true,
  includeLinks: true
};
var KnowledgeSynthesisPlugin = class extends import_obsidian6.Plugin {
  /**
   * Plugin initialization
   */
  async onload() {
    console.log("Loading Knowledge Synthesis plugin");
    await this.loadSettings();
    this.conceptExtractor = new ConceptExtractorImpl();
    this.conceptExtractor.setSensitivity(this.settings.extractionSensitivity);
    this.conceptGraph = new ConceptGraphImpl(this.app.vault);
    this.dataManager = new DataManagerImpl(this);
    this.noteProcessor = new NoteProcessor(
      this.app.vault,
      this.conceptExtractor,
      this.conceptGraph,
      () => this.dataManager.saveConceptData()
    );
    this.summaryGenerator = new SummaryGenerator(
      this.app,
      this.conceptGraph,
      (file) => this.getRelatedNotes(file)
    );
    await this.dataManager.loadConceptData();
    this.registerView(
      RELATED_NOTES_VIEW_TYPE,
      (leaf) => new RelatedNotesView(leaf, this)
    );
    this.addRibbonIcon("network", "Knowledge Synthesis", () => {
      this.activateView();
    });
    this.addCommands();
    this.registerEvents();
    this.addSettingTab(new KnowledgeSynthesisSettingTab(this.app, this));
    this.processAllNotes();
    console.log("Knowledge Synthesis plugin loaded");
  }
  /**
   * Clean up when plugin is disabled
   */
  onunload() {
    console.log("Knowledge Synthesis plugin unloaded");
  }
  /**
   * Load plugin settings
   */
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  /**
   * Save plugin settings
   */
  async saveSettings() {
    await this.saveData(this.settings);
    this.conceptExtractor.setSensitivity(this.settings.extractionSensitivity);
  }
  /**
   * Add plugin commands to Obsidian command palette
   */
  addCommands() {
    this.addCommand({
      id: "extract-concepts",
      name: "Extract Concepts from Current Note",
      checkCallback: (checking) => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
        if (activeView) {
          if (!checking) {
            this.processCurrentNote();
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "show-related-notes",
      name: "Show Related Notes",
      checkCallback: (checking) => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
        if (activeView) {
          if (!checking) {
            this.activateView();
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "generate-summary",
      name: "Generate Summary from Related Notes",
      checkCallback: (checking) => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
        if (activeView && activeView.file) {
          if (!checking) {
            this.generateSummary(activeView.file);
          }
          return true;
        }
        return false;
      }
    });
  }
  /**
   * Register event handlers
   */
  registerEvents() {
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        if (file instanceof import_obsidian6.TFile && file.extension === "md") {
          if (this.settings.realTimeSuggestions) {
            this.noteProcessor.processNote(file);
          }
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("delete", (file) => {
        if (file instanceof import_obsidian6.TFile && file.extension === "md") {
          this.conceptGraph.removeNote(file.path);
          this.dataManager.saveConceptData();
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (file instanceof import_obsidian6.TFile && file.extension === "md") {
          this.conceptGraph.removeNote(oldPath);
          this.noteProcessor.processNote(file);
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", (leaf) => {
        if ((leaf == null ? void 0 : leaf.view) instanceof import_obsidian6.MarkdownView && this.settings.realTimeSuggestions) {
          this.processCurrentNote();
        }
      })
    );
  }
  /**
   * Process the current active note
   */
  async processCurrentNote() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
    if (activeView && activeView.file) {
      await this.noteProcessor.processNote(activeView.file);
      this.updateRelatedNotesView(activeView.file);
    }
  }
  /**
   * Activate the related notes view
   */
  async activateView() {
    const leaves = this.app.workspace.getLeavesOfType(RELATED_NOTES_VIEW_TYPE);
    if (leaves.length === 0) {
      const leaf = this.app.workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({
          type: RELATED_NOTES_VIEW_TYPE,
          active: true
        });
      }
    }
    const existingLeaves = this.app.workspace.getLeavesOfType(RELATED_NOTES_VIEW_TYPE);
    if (existingLeaves.length > 0) {
      this.app.workspace.revealLeaf(existingLeaves[0]);
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
      if (activeView && activeView.file) {
        this.updateRelatedNotesView(activeView.file);
      }
    }
  }
  /**
   * Update the related notes view with data for a file
   * @param file File to show related notes for
   */
  updateRelatedNotesView(file) {
    const leaves = this.app.workspace.getLeavesOfType(RELATED_NOTES_VIEW_TYPE);
    if (leaves.length > 0) {
      const view = leaves[0].view;
      const relatedNotes = this.conceptGraph.findRelatedNotes(
        file.path,
        this.settings.maxRelatedNotes
      );
      view.updateRelatedNotes(file, relatedNotes);
    }
  }
  /**
   * Process all existing notes in the vault
   * Public for settings tab access
   */
  async processAllNotes() {
    await this.noteProcessor.processAllNotes();
  }
  /**
   * Clear all stored data
   * Public for settings tab access
   */
  async clearData() {
    await this.dataManager.clearData();
  }
  /**
   * API method: Get related notes for a file
   * @param file File to find related notes for
   * @returns Array of related notes
   */
  async getRelatedNotes(file) {
    return this.conceptGraph.findRelatedNotes(
      file.path,
      this.settings.maxRelatedNotes
    );
  }
  /**
   * API method: Extract concepts from content
   * @param content Text content to analyze
   * @returns Array of extracted concepts
   */
  extractConcepts(content) {
    return this.conceptExtractor.extractConcepts(content);
  }
  /**
   * API method: Add a concept to a note (used by UI when user adds a concept)
   * @param filePath Path to the file
   * @param concept Concept to add
   */
  async addConceptToNote(filePath, concept) {
    const concepts = this.conceptGraph.getNoteConcepts(filePath);
    if (!concepts.includes(concept)) {
      concepts.push(concept);
      this.conceptGraph.addNote(filePath, concepts);
      await this.dataManager.saveConceptData();
      new import_obsidian6.Notice(`Added concept "${concept}" to note`);
    }
  }
  /**
   * API method: Generate a summary from related notes
   * @param file File to generate summary for
   */
  generateSummary(file) {
    return this.summaryGenerator.generateSummary(file);
  }
  /**
   * API method: Get plugin settings
   * @returns Current plugin settings
   */
  getSettings() {
    return this.settings;
  }
};
//# sourceMappingURL=data:application/json;base64,
