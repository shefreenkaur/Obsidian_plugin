/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var T=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var W=Object.prototype.hasOwnProperty;var K=(c,e)=>{for(var t in e)T(c,t,{get:e[t],enumerable:!0})},U=(c,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of _(e))!W.call(c,n)&&n!==t&&T(c,n,{get:()=>e[n],enumerable:!(s=I(e,n))||s.enumerable});return c};var B=c=>U(T({},"__esModule",{value:!0}),c);var j={};K(j,{default:()=>P});module.exports=B(j);var p=require("obsidian");var w=class{constructor(){this.stopWords=new Set(["a","an","the","and","or","but","is","are","was","were","be","been","being","have","has","had","do","does","did","of","as","like","if","that","you","with","your","through","to","from","in","out","on","off","over","under","again","further","then","once","here","there","when","where","why","how","all","any","both","each","few","more","most","other","some","such","no","nor","not","only","own","same","so","than","too","very","can","will","just","should","now"])}tokenize(e){return e.toLowerCase().replace(/[^\w\s]/g," ").replace(/\s+/g," ").trim().split(" ")}calculateTermFrequency(e){let t=new Map;for(let s of e){let n=t.get(s)||0;t.set(s,n+1)}return t}removeStopWords(e){return e.filter(t=>!this.stopWords.has(t)&&t.length>1)}stemWords(e){return e.map(t=>t.endsWith("ing")?t.slice(0,-3):t.endsWith("ly")?t.slice(0,-2):t.endsWith("s")&&!t.endsWith("ss")?t.slice(0,-1):t.endsWith("ed")&&t.length>4?t.slice(0,-2):t)}extractNamedEntities(e){let t=e.split(/[.!?]+/),s=[];for(let n of t){let i=n.trim().split(" ");for(let h=0;h<i.length;h++){let o=i[h];h>0&&o.length>1&&/^[A-Z][a-z]+$/.test(o)&&s.push(o),h<i.length-1&&o.length>1&&/^[A-Z][a-z]+$/.test(o)&&/^[A-Z][a-z]+$/.test(i[h+1])&&s.push(`${o} ${i[h+1]}`)}}return[...new Set(s)]}};var y=class{constructor(){this.sensitivity=5;this.userFeedback=new Map;this.textProcessor=new w}extractConcepts(e){if(!e||e.trim()==="")return[];let s=[...this.extractFromTfIdf(e),...this.extractFromHeadings(e),...this.extractFromEmphasis(e),...this.extractFromNamedEntities(e)].filter(n=>this.userFeedback.get(n)!==!1);return[...new Set(s)]}setSensitivity(e){this.sensitivity=Math.max(1,Math.min(10,e))}learnFromUserFeedback(e,t){this.userFeedback.set(e,t)}extractFromTfIdf(e){let t=this.textProcessor.tokenize(e),s=this.textProcessor.removeStopWords(t),n=this.textProcessor.calculateTermFrequency(s),i=Math.max(2,Math.floor(20/(11-this.sensitivity)));return Array.from(n.entries()).filter(([o,r])=>r>=i).sort((o,r)=>r[1]-o[1]).slice(0,this.sensitivity*3).map(([o,r])=>o)}extractFromHeadings(e){let t=/^#+\s+(.+)$/gm,s=[],n;for(;(n=t.exec(e))!==null;)s.push(n[1].trim());return s}extractFromEmphasis(e){let t=/(\*\*|__)(.*?)\1|(\*|_)(.*?)\3/g,s=[],n;for(;(n=t.exec(e))!==null;){let i=n[2]||n[4];i&&i.trim().length>0&&s.push(i.trim())}return s}extractFromNamedEntities(e){return this.textProcessor.extractNamedEntities(e)}};var M=require("obsidian"),C=class{constructor(e){this.notes=new Map;this.concepts=new Map;this.vault=e}addNote(e,t){this.notes.set(e,{path:e,concepts:t,lastUpdated:Date.now()});for(let s of t){let n=this.concepts.get(s)||{name:s,notePaths:[],weight:1};n.notePaths.includes(e)||n.notePaths.push(e),n.weight=n.notePaths.length,this.concepts.set(s,n)}}removeNote(e){let t=this.notes.get(e);if(t){for(let s of t.concepts){let n=this.concepts.get(s);n&&(n.notePaths=n.notePaths.filter(i=>i!==e),n.weight=n.notePaths.length,n.notePaths.length===0?this.concepts.delete(s):this.concepts.set(s,n))}this.notes.delete(e)}}findRelatedNotes(e,t=10){let s=this.notes.get(e);if(!s)return[];let n=new Map;for(let o of s.concepts){let r=this.concepts.get(o);if(r)for(let a of r.notePaths){if(a===e)continue;let l=n.get(a)||{relevance:0,sharedConcepts:[]};l.relevance+=r.weight,l.sharedConcepts.includes(o)||l.sharedConcepts.push(o),n.set(a,l)}}let i=[],h=Math.max(...Array.from(n.values()).map(o=>o.relevance),1);for(let[o,r]of n.entries()){let a=this.vault.getAbstractFileByPath(o);!a||!(a instanceof M.TFile)||i.push({file:a,relevance:r.relevance/h,sharedConcepts:r.sharedConcepts})}return i.sort((o,r)=>r.relevance-o.relevance).slice(0,t)}getNoteConcepts(e){let t=this.notes.get(e);return t?t.concepts:[]}getConceptNetwork(){let e=[],t=[];for(let[s,n]of this.notes.entries())e.push({id:s,label:s.split("/").pop()||s,type:"note"});for(let[s,n]of this.concepts.entries())if(n.notePaths.length>1){e.push({id:`concept-${s}`,label:s,type:"concept",weight:n.weight});for(let i of n.notePaths)t.push({source:`concept-${s}`,target:i,value:1})}return{nodes:e,edges:t}}updateNoteConcepts(e,t){this.notes.set(e,{path:e,concepts:t,lastUpdated:Date.now()})}};var N=class{constructor(e){this.CURRENT_VERSION=1;this.plugin=e,this.data={version:this.CURRENT_VERSION,notes:{},concepts:{},userFeedback:{}}}async saveConceptData(){await this.plugin.saveData(this.data)}async loadConceptData(){try{let e=await this.plugin.loadData();if(!e)return;e.version!==this.CURRENT_VERSION?this.data=this.migrateData(e):this.data=e}catch(e){console.error("Failed to load concept data:",e)}}async clearData(){this.data={version:this.CURRENT_VERSION,notes:{},concepts:{},userFeedback:{}},await this.saveConceptData()}getData(){return this.data}setData(e,t,s){this.data={version:this.CURRENT_VERSION,notes:e,concepts:t,userFeedback:s}}migrateData(e){return{version:this.CURRENT_VERSION,notes:e.notes||{},concepts:e.concepts||{},userFeedback:e.userFeedback||{}}}};var F=require("obsidian"),x=class{constructor(e,t,s,n){this.vault=e;this.conceptExtractor=t;this.conceptGraph=s;this.saveCallback=n;this.processedFiles=new Map}async processNote(e){if(this.shouldProcessNote(e))try{let t=await this.vault.read(e),s=this.conceptExtractor.extractConcepts(t);this.conceptGraph.addNote(e.path,s),this.processedFiles.set(e.path,e.stat.mtime),await this.saveCallback()}catch(t){console.error(`Error processing file ${e.path}:`,t)}}shouldProcessNote(e){if(e.extension!=="md")return!1;let t=e.stat.mtime,s=this.processedFiles.get(e.path);return!s||s<t}async processAllNotes(){let e=this.vault.getMarkdownFiles(),t=0,s=new F.Notice(`Processing ${e.length} notes...`,0);for(let n of e)await this.processNote(n),t++,t%10===0&&s.setMessage(`Processed ${t}/${e.length} notes...`);await this.saveCallback(),s.hide(),new F.Notice(`Completed processing ${t} notes.`)}};var D=require("obsidian"),E=class{constructor(e,t,s){this.app=e;this.conceptGraph=t;this.getRelatedNotes=s}async generateSummary(e){var r;let t=await this.getRelatedNotes(e);if(t.length===0)return new D.Notice("No related notes found to generate summary"),"";let s=`Summary of ${e.basename}`,n=`# ${s}

`;n+=`> [!info] Summary generated from ${e.basename} and ${t.length} related notes
`,n+=`> Generated on ${new Date().toLocaleString()}

`;let i=await this.app.vault.read(e);n+=`## Original Note: ${e.basename}

`;let h=i.split(`

`)[0];n+=`${h}

`;let o=this.conceptGraph.getNoteConcepts(e.path);o.length>0&&(n+=`## Key Concepts

`,n+=o.map(a=>`- ${a}`).join(`
`),n+=`

`),n+=`## Related Notes

`;for(let a of t){n+=`### ${a.file.basename}

`,a.sharedConcepts.length>0&&(n+=`Shared concepts: ${a.sharedConcepts.join(", ")}

`);try{let A=(await this.app.vault.read(a.file)).split(`

`)[0];n+=`${A}

`}catch(l){n+=`Error reading note content.

`}n+=`[[${a.file.path}|View full note]]

`}try{let a=`${((r=e.parent)==null?void 0:r.path)||""}/${s}.md`,l=this.app.vault.getAbstractFileByPath(a);return l?await this.app.vault.modify(l,n):l=await this.app.vault.create(a,n),this.app.workspace.getLeaf().openFile(l),n}catch(a){return console.error("Error creating summary:",a),new D.Notice("Error creating summary note"),""}}};var $=require("obsidian"),m="knowledge-synthesis-related-notes",b=class extends $.ItemView{constructor(t,s){super(t);this.currentFile=null;this.pluginApi=s}getViewType(){return m}getDisplayText(){return"Related Notes"}async onOpen(){let{containerEl:t}=this;t.empty(),this.relatedContentEl=t.createDiv({cls:"knowledge-synthesis-related-notes"}),this.relatedContentEl.createEl("h3",{text:"Related Notes"}),this.relatedContentEl.createEl("p",{text:"Open a note to see related content.",cls:"knowledge-synthesis-placeholder"})}updateRelatedNotes(t,s){this.currentFile=t,this.relatedContentEl.empty(),this.relatedContentEl.createEl("h3",{text:"Related to: "+t.basename});let n=this.pluginApi.extractConcepts(t.path);if(n.length>0){let o=this.relatedContentEl.createDiv({cls:"knowledge-synthesis-concepts"});o.createEl("h4",{text:"Key Concepts"});let r=o.createDiv({cls:"knowledge-synthesis-concepts-list"});for(let a of n){let l=r.createSpan({cls:"knowledge-synthesis-concept-tag",text:a})}}if(s.length>0){let o=this.relatedContentEl.createDiv({cls:"knowledge-synthesis-related"});o.createEl("h4",{text:"Related Notes"});let r=o.createDiv({cls:"knowledge-synthesis-related-list"});for(let a of s){let l=r.createDiv({cls:"knowledge-synthesis-related-note"});l.createEl("a",{cls:"knowledge-synthesis-note-link",text:a.file.basename}).addEventListener("click",async d=>{d.preventDefault();let g=this.app.workspace.getLeaf();g&&await g.openFile(a.file)});let L=l.createDiv({cls:"knowledge-synthesis-relevance-bar"}).createDiv({cls:"knowledge-synthesis-relevance-indicator"});L.style.width=`${Math.round(a.relevance*100)}%`;let k=l.createDiv({cls:"knowledge-synthesis-shared-concepts"});k.createSpan({cls:"knowledge-synthesis-shared-label",text:"Shared concepts: "});let V=k.createDiv({cls:"knowledge-synthesis-shared-list"});for(let d of a.sharedConcepts){let g=V.createSpan({cls:"knowledge-synthesis-concept-tag knowledge-synthesis-shared",text:d}),v=g.createEl("button",{text:"\xD7"});v.style.marginLeft="6px",v.onclick=()=>{a.sharedConcepts=a.sharedConcepts.filter(R=>R!==d),g.remove(),this.pluginApi.updateNoteConcepts(a.file.path,a.sharedConcepts)}}let G=k.createDiv({cls:"knowledge-synthesis-add-concept"}),f=G.createEl("input");f.placeholder="Add new concept...",f.style.marginRight="6px";let O=G.createEl("button",{text:"Add"});O.onclick=()=>{let d=f.value.trim();if(d&&!a.sharedConcepts.includes(d)){a.sharedConcepts.push(d),this.pluginApi.updateNoteConcepts(a.file.path,a.sharedConcepts);let g=V.createSpan({cls:"knowledge-synthesis-concept-tag knowledge-synthesis-shared",text:d}),v=g.createEl("button",{text:"\xD7"});v.style.marginLeft="6px",v.onclick=()=>{g.remove(),a.sharedConcepts=a.sharedConcepts.filter(R=>R!==d),this.pluginApi.updateNoteConcepts(a.file.path,a.sharedConcepts)},f.value=""}}}}else this.relatedContentEl.createEl("p",{text:"No related notes found. Try adding more content or concepts.",cls:"knowledge-synthesis-no-results"});this.relatedContentEl.createDiv({cls:"knowledge-synthesis-actions"}).createEl("button",{cls:"knowledge-synthesis-summary-btn",text:"Generate Summary"}).addEventListener("click",async()=>{this.currentFile&&await this.pluginApi.generateSummary(this.currentFile)})}clear(){this.relatedContentEl.empty(),this.currentFile=null,this.relatedContentEl.createEl("h3",{text:"Related Notes"}),this.relatedContentEl.createEl("p",{text:"Open a note to see related content.",cls:"knowledge-synthesis-placeholder"})}};var u=require("obsidian"),S=class extends u.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Knowledge Synthesis Settings"}),new u.Setting(e).setName("Concept Extraction Sensitivity").setDesc("Higher values extract more concepts (1-10)").addSlider(t=>t.setLimits(1,10,1).setValue(this.plugin.settings.extractionSensitivity).setDynamicTooltip().onChange(async s=>{this.plugin.settings.extractionSensitivity=s,await this.plugin.saveSettings()})),new u.Setting(e).setName("Reprocess All Notes").setDesc("Update the concept graph with all notes in the vault").addButton(t=>t.setButtonText("Reprocess").onClick(async()=>{await this.plugin.processAllNotes()})),new u.Setting(e).setName("Clear All Data").setDesc("Reset all concept and relationship data").addButton(t=>t.setButtonText("Clear Data").setWarning().onClick(async()=>{confirm("Are you sure you want to clear all Knowledge Synthesis data? This cannot be undone.")&&(await this.plugin.dataManager.clearData(),new u.Notice("Knowledge Synthesis data cleared"))}))}};var z={extractionSensitivity:5,maxRelatedNotes:10,realTimeSuggestions:!0,includeTags:!0,includeLinks:!0},P=class extends p.Plugin{async onload(){console.log("Loading Knowledge Synthesis plugin"),await this.loadSettings(),this.conceptExtractor=new y,this.conceptExtractor.setSensitivity(this.settings.extractionSensitivity),this.conceptGraph=new C(this.app.vault),this.dataManager=new N(this),this.noteProcessor=new x(this.app.vault,this.conceptExtractor,this.conceptGraph,()=>this.dataManager.saveConceptData()),this.summaryGenerator=new E(this.app,this.conceptGraph,e=>this.getRelatedNotes(e)),await this.dataManager.loadConceptData(),this.registerView(m,e=>new b(e,this)),this.addRibbonIcon("network","Knowledge Synthesis",()=>{this.activateView()}),this.addCommands(),this.registerEvents(),this.addSettingTab(new S(this.app,this)),this.processAllNotes(),console.log("Knowledge Synthesis plugin loaded")}onunload(){console.log("Knowledge Synthesis plugin unloaded")}async loadSettings(){this.settings=Object.assign({},z,await this.loadData())}async saveSettings(){await this.saveData(this.settings),this.conceptExtractor.setSensitivity(this.settings.extractionSensitivity)}addCommands(){this.addCommand({id:"extract-concepts",name:"Extract Concepts from Current Note",checkCallback:e=>this.app.workspace.getActiveViewOfType(p.MarkdownView)?(e||this.processCurrentNote(),!0):!1}),this.addCommand({id:"show-related-notes",name:"Show Related Notes",checkCallback:e=>this.app.workspace.getActiveViewOfType(p.MarkdownView)?(e||this.activateView(),!0):!1}),this.addCommand({id:"generate-summary",name:"Generate Summary from Related Notes",checkCallback:e=>{let t=this.app.workspace.getActiveViewOfType(p.MarkdownView);return t&&t.file?(e||this.generateSummary(t.file),!0):!1}})}registerEvents(){this.registerEvent(this.app.vault.on("modify",e=>{e instanceof p.TFile&&e.extension==="md"&&this.settings.realTimeSuggestions&&this.noteProcessor.processNote(e)})),this.registerEvent(this.app.vault.on("delete",e=>{e instanceof p.TFile&&e.extension==="md"&&(this.conceptGraph.removeNote(e.path),this.dataManager.saveConceptData())})),this.registerEvent(this.app.vault.on("rename",(e,t)=>{e instanceof p.TFile&&e.extension==="md"&&(this.conceptGraph.removeNote(t),this.noteProcessor.processNote(e))})),this.registerEvent(this.app.workspace.on("active-leaf-change",e=>{(e==null?void 0:e.view)instanceof p.MarkdownView&&this.settings.realTimeSuggestions&&this.processCurrentNote()}))}async processCurrentNote(){let e=this.app.workspace.getActiveViewOfType(p.MarkdownView);e&&e.file&&(await this.noteProcessor.processNote(e.file),this.updateRelatedNotesView(e.file))}async activateView(){if(this.app.workspace.getLeavesOfType(m).length===0){let s=this.app.workspace.getRightLeaf(!1);s&&await s.setViewState({type:m,active:!0})}let t=this.app.workspace.getLeavesOfType(m);if(t.length>0){this.app.workspace.revealLeaf(t[0]);let s=this.app.workspace.getActiveViewOfType(p.MarkdownView);s&&s.file&&this.updateRelatedNotesView(s.file)}}updateRelatedNotesView(e){let t=this.app.workspace.getLeavesOfType(m);if(t.length>0){let s=t[0].view,n=this.conceptGraph.findRelatedNotes(e.path,this.settings.maxRelatedNotes);s.updateRelatedNotes(e,n)}}async processAllNotes(){await this.noteProcessor.processAllNotes()}async clearData(){await this.dataManager.clearData()}async getRelatedNotes(e){return this.conceptGraph.findRelatedNotes(e.path,this.settings.maxRelatedNotes)}extractConcepts(e){return this.conceptExtractor.extractConcepts(e)}async addConceptToNote(e,t){let s=this.conceptGraph.getNoteConcepts(e);s.includes(t)||(s.push(t),this.conceptGraph.addNote(e,s),await this.dataManager.saveConceptData(),new p.Notice(`Added concept "${t}" to note`))}generateSummary(e){return this.summaryGenerator.generateSummary(e)}getSettings(){return this.settings}updateNoteConcepts(e,t){this.conceptGraph.updateNoteConcepts(e,t)}};
